name: deploy-zerogram-server

on:
  push:
    branches: ["main"]
  workflow_dispatch:

# 동시 실행 방지(진행 중이면 이전 실행 취소)
concurrency:
  group: deploy-zerogram-server
  cancel-in-progress: true

jobs:
  deploy-zerogram-server:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      APP_ROOT: /var/www/zerogram
      RELEASE_DIR: /var/www/zerogram/releases
      NODE_VERSION: 18

    steps:
      # 1) 코드 체크아웃
      - uses: actions/checkout@v4

      # 2) Node.js 설치
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # cache: npm   # (선택) 빌드 속도 개선 시 사용

      # 3) 의존성 설치
      - name: Install deps
        run: npm ci

      # 4) 빌드(있으면)
      - name: Build
        run: npm run build --if-present

      # 5) 배포 번들(tgz) 생성 (에러 삼키지 않음)
      - name: Create bundle
        run: |
          set -e
          RELEASE=$(date +%Y%m%d%H%M%S)
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          mkdir -p bundle
          # 런타임에 필요한 파일만 포함
          tar -czf bundle/app-$RELEASE.tgz \
            --exclude=".git" \
            --exclude="node_modules" \
            dist \
            package.json package-lock.json \
            ecosystem.config.js
          # ※ dist/server.js가 진입점이어야 하며, ecosystem은 cwd=/var/www/zerogram/current 권장

      # 6) EC2로 번들 전송
      - name: Upload bundle to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }} # ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: bundle/app-${{ env.RELEASE }}.tgz
          target: /tmp
          # port: ${{ secrets.EC2_PORT }}     # 22가 아니면 주석 해제

      # 7) EC2에서 무중단 배포 (current 전환 → pm2 reload)
      - name: Deploy on EC2 (zero-downtime)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # port: ${{ secrets.EC2_PORT }}
          script: |
            set -euo pipefail

            RELEASE=${{ env.RELEASE }}
            APP_ROOT=${{ env.APP_ROOT }}
            RELEASE_DIR=${{ env.RELEASE_DIR }}
            SHARED_DIR="$APP_ROOT/shared"

            # 릴리즈 폴더 생성 및 아티팩트 전개
            mkdir -p "$RELEASE_DIR/$RELEASE"
            TARBALL="/tmp/app-$RELEASE.tgz"
            [ -f "$TARBALL" ] || TARBALL="/tmp/bundle/app-$RELEASE.tgz"
            tar -xzf "$TARBALL" -C "$RELEASE_DIR/$RELEASE"
            rm -f "$TARBALL"

            cd "$RELEASE_DIR/$RELEASE"

            # 프로덕션 의존성만 설치
            npm ci --omit=dev

            # 공유 자원(.env, uploads, logs) 심볼릭 링크
            mkdir -p "$SHARED_DIR" "$SHARED_DIR/uploads" "$SHARED_DIR/logs"
            [ -f "$SHARED_DIR/.env" ] && ln -sfn "$SHARED_DIR/.env" "$RELEASE_DIR/$RELEASE/.env"
            ln -sfn "$SHARED_DIR/uploads" "$RELEASE_DIR/$RELEASE/uploads"
            ln -sfn "$SHARED_DIR/logs"    "$RELEASE_DIR/$RELEASE/logs"

            # (권장) ecosystem을 shared에 두고 각 릴리즈에 링크
            if [ -f "$SHARED_DIR/ecosystem.config.js" ]; then
              ln -sfn "$SHARED_DIR/ecosystem.config.js" "$RELEASE_DIR/$RELEASE/ecosystem.config.js"
            fi

            # 1) current 링크를 새 릴리즈로 전환
            ln -sfn "$RELEASE_DIR/$RELEASE" "$APP_ROOT/current"

            # 2) PM2 무중단 재적재(없으면 start)
            if pm2 reload "$APP_ROOT/current/ecosystem.config.js" --env production; then
              echo "PM2 reloaded"
            else
              pm2 start "$APP_ROOT/current/ecosystem.config.js" --env production
            fi

            pm2 save

            # 3) 오래된 릴리즈 정리(최근 5개만 유지)
            ls -1dt "$RELEASE_DIR"/* | tail -n +6 | xargs -r rm -rf
